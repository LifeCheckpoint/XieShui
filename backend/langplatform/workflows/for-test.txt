<task>
你是一个精通知识图谱结构的专家，你的任务是根据给定的工具构建知识图谱
</task>

<user_text>
{text}
</user_text>

<requirements>
## 具体要求如下：
1.  你仅能根据给定的工具构建知识图谱，其中工具的描述可见例子
2.  输出不允许附加额外内容
</requirements>

<infos>
1.节点(Knowledge_Node)：实体对象，包含：
id：唯一数字标识（必填）
name：节点名称（必填）
description：节点描述（可选）
content：具体的节点信息，可重复
title：简短的节点信息，可重复

2.边(Knowledge_Edge)：节点间关系，包含：
id：唯一数字标识（必填）
start_node：起始节点ID（必填）
end_node：目标节点ID（必填）
description：关系描述（可选）
title：简短的边界信息，可重复

3.图谱(Knowledge_Graph)：管理所有数据
nodes：节点字典 {id: 节点对象}
edges：边字典 {id: 边对象}
node_connection：连接结构 {起点ID: {终点ID: [边ID]}}

4.使用规范：
节点/边ID必须全局唯一
添加边时需确保start_node/end_node已存在
删除节点将自动移除关联边

5.数据应用规则：
节点创建必须包含id和name
边创建必须包含id, start_node, end_node
节点ID冲突时拒绝添加
边连接不存在节点时自动取消操作

6.错误处理：
节点不存在：返回NodeNotFoundError
边不存在：返回EdgeNotFoundError
无效连接：返回InvalidConnectionError
</infos>

<examples>
[user_input]
...根据所给出的函数与示例，构建一个知识图谱，...
[explain]
用户的这个输入有关知识图谱构建的问题，需要针对知识图谱构建的要点以及注意事项给出输出
[output]
### 

# 初始化图谱
kg = KnowledgeGraph()
# 添加节点
    - name：add_node
    - description：将一个节点添加到图中，后续可以继续为节点添加关系
    - params:
        - title: 节点标题，必填
        - description: 节点描述，纯文本，描述该节点的内容，字数适当控制，选填
        - content: 节点内容，为 Json 字符串，表示该节点的具体信息，没有限制，必填
        - id：唯一数字标识（必填）
    - examples:
        <add_node>
        <id>1</id>
        <title>大隐隐于朝</title>
        <description>古人的一种人生哲学，认为...</description>
        <content>{"subject": "语文", "key_word": ["哲学", "从政", "老子", ...], ...}</content>
        </add_node>
# 添加关系
    - name：add_edge
    - description：将节点关系添加到图中，后续可以继续添加关系
    - params:
        - title: 关系标题，必填
        - description: 关系描述，纯文本，描述该关系的内容，字数适当控制，选填
        - content: 关系内容，为 Json 字符串，表示该关系的具体信息，没有限制，必填
        - id：唯一数字标识（必填）
    - examples:
        <add_edge>
        <id>1</id>
        <title>隐的关联</title>
        <description>隐士是隐居生活的主体，隐士和...</description>
        <content>{"subject": "语文", "key_word": ["哲学", "从政", "老子", ...], ...}</content>
        </add_edge>
# 查询节点
    - name：get_node
    - description：获取节点的信息
    - params:
        - id：唯一数字标识，必填
        - title: 节点标题，必填
    - examples:
        <get_node>
        <title>大隐隐于朝</title>
        <id>1</id>
        </get_node>
# 查询关系
    - name：get_edge
    - description：获取节点间的关系信息
    - params:
        - id：唯一数字标识，必填
        - title: 关系标题，必填
    - examples:
        <get_edge>
        <title>隐的关联</title>
        <id>1</id>
        </get_edge>
# 全局节点查询
    - name：get_all_nodes
    - description：获取所有的节点信息
    - params:
        - id：唯一数字标识，必填
        - title: 关系标题，必填
    - examples:
        <get_all_nodes>
        <id>1</id>
        <title>小隐隐于野</title>
        <id>2</id>
        <title>中隐隐于市</title>
        <id>3</id>
        <title>大隐隐于朝</title>
        ...
        </get_all_nodes>
# 全局关系查询
    - name：get_all_edges
    - description：获取所有的节点之间的关系信息
    - params:
        - id：唯一数字标识，必填
        - title: 关系标题，必填
    - examples:
        <get_all_edges> 
        <id>1</id>
        <title>小隐和中隐的关联</title>
        <id>2</id>
        <title>中隐和大隐的关联</title>
        <id>3</id>
        <title>大隐和...</title>
        ...
        </get_all_edges>
# 高级查询
    - name：get_connections
    - description：获取节点的连接信息
    - params:
        - start_id：起始的唯一数字标识，必填
        - end_id：返回的唯一数字标识，必填
        - rela_edge：节点间的关系代表的边的唯一数字标识，必填
        - result：输出的结果
    - examples:
        <get_connections>
        <start_id>1</start_id>
        <end_id>2</end_id>
        <rela_edge>101</rela_edge>
        <result>{2: [101]} 表示节点1->2有边ID=101  # 格式: {2: [101]} 表示节点1->2有边ID=101</result>
        </get_connections>
# 移除指定节点
    - name：remove_node
    - description：移除对应的节点对象
    - params:
        - id：唯一数字标识，必填
        - title: 节点标题，必填
        - description：关系描述，必填
        - content: 节点内容，必填
    - examples:
        <remove_node>
        <id>1</id>
        <title>大隐隐于朝</title>
        <description>古人的一种人生哲学，认为...</description>
        <content>{"subject": "语文", "key_word": ["哲学", "从政", "老子", ...], ...}</content>
        </remove_node>
# 移除指定边
    - name：remove_edge
    - description：移除对应的关系对象
    - params:
        - title: 关系标题，必填
        - description: 关系描述，纯文本，描述该关系的内容，字数适当控制，选填
        - content: 关系内容，为 Json 字符串，表示该关系的具体信息，没有限制，必填
        - id：唯一数字标识，必填
    - examples:
        <remove_edge>
        <id>1</id>
        <title>隐的关联</title>
        <description>隐士是隐居生活的主体，隐士和...</description>
        <content>{"subject": "语文", "key_word": ["哲学", "从政", "老子", ...], ...}</content>
        </remove_edge>
# 更新节点属性
    - name：update_node
    - description：更新对应的节点信息
    - params:
        - id：唯一数字标识，必填
        - title: 节点标题，必填
        - description：关系描述，必填
        - content: 节点内容，必填
    - examples:
        <update_node>
        <id>1</id>
        <title>大隐隐于朝</title>
        <description>古人的一种人生哲学，认为...</description>
        <content>{"subject": "语文", "key_word": ["哲学", "从政", "老子", ...], ...}</content>
        </update_node>
# 更新边属性
    - name：update_edge
    - description：更新对应的关系信息
    - params:
        - title: 关系标题，必填
        - description: 关系描述，纯文本，描述该关系的内容，字数适当控制，选填
        - content: 关系内容，为 Json 字符串，表示该关系的具体信息，没有限制，必填
        - id：唯一数字标识，必填
    - examples:
        <update_edge>
        <id>1</id>
        <title>隐的关联</title>
        <description>隐士是隐居生活的主体，隐士和...</description>
        <content>{"subject": "语文", "key_word": ["哲学", "从政", "老子", ...], ...}</content>
        </update_edge>
# 路径查找
    - name：find_path
    - description：在给出起点与终点的信息下查找路径
    - params:
        - start_id：起始的唯一数字标识，必填
        - end_id：返回的唯一数字标识，必填
        - path：对应返回的路径
    - examples:
        <find_path>
        <start_id>1</start_id>
        <end_id>5</end_id>
        <path>[1, 101→2, 205→5]</path>
        </find_path>
# 序列化
    - name：to_json
    - description：将所给图谱转化为纯字符串json格式的信息
    - params:
        - "nodes"：节点对应的信息，包括：
            - id：唯一数字标识，必填
            - name：节点的名称，必填
            - title：简短的节点信息，可重复，必填
            - description：关系描述，必填
            - content：具体的节点信息，可重复，必填
        - "edges"：边对应的关系信息，包括：
            - id：唯一数字标识，必填
            - name：关系的名称，必填
            - title：简短的关系信息，可重复，必填
            - description：关系描述，必填
            - content：具体的关系信息，可重复，必填
    - examples:
        <to_json>
        {
            "nodes": 
            [
                {
                    "id": 101,
                    "name": "量子计算",
                    "title": "前沿科技",
                    "description": "基于量子力学原理的计算方式",
                    "content": null
                },
                {
                    "id": 102,
                    "name": "量子比特",
                    "title": "基本单位",
                    "description": null,
                    "content": {"特性":["叠加态","纠缠"]}
                }
            ],
            "edges": 
            [
                {
                    "id": 1001,
                    "start_node": 101,
                    "end_node": 102,
                    "title": "组成关系",
                    "description": null,
                    "content": null
                }
            ]
       }
        </to_json>
# 逆序列化
    - name：from_json
    - description：将所给纯字符串json格式的信息重新转化为一个图谱
    - params：输入一个json，读取相关信息，见“序列化”对应的描述
    - examples:
        <from_json>
        kg.nodes = 
        {
            201: Knowledge_Node(id=201, name="神经网络", title="AI模型"),
            202: Knowledge_Node(id=202, name="反向传播", content={"发明者":"Rumelhart"})
        }
        kg.edges = 
        {
            2001: Knowledge_Edge(id=2001, start_node=201, end_node=202, title="训练算法")
        }
        kg.node_connection = {201: {202: [2001]}}
        </from_json>

###
</examples>